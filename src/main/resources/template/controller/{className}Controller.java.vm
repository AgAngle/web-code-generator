package ${package}.${moduleName}.controller;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import jakarta.annotation.Resource;
import io.cordys.common.constants.PermissionConstants;
import io.cordys.common.pager.Pager;
import io.cordys.security.SessionUtils;
import ${package}.${moduleName}.domain.${className};
import ${package}.${moduleName}.dto.request.*;
import ${package}.${moduleName}.dto.response.*;

import ${package}.${moduleName}.service.${className}Service;
import ${mainPath}.common.pager.PageUtils;
import java.util.List;

/**
 *
 * @author ${author}
 * @date ${datetime}
 */
@Tag(name = "${comments}")
@RestController
@RequestMapping("/${class_name}")
public class ${className}Controller {
    @Resource
    private ${className}Service ${classname}Service;

    @PostMapping("/page")
    @RequiresPermissions(PermissionConstants.${permissionPrefix}_READ)
    @Operation(summary = "${comments}列表")
    public Pager<List<${className}ListResponse>> list(@Validated @RequestBody ${className}PageRequest request){
        Page<Object> page = PageHelper.startPage(request.getCurrent(), request.getPageSize());
        return PageUtils.setPageInfo(page, ${classname}Service.list(request));
    }

    @GetMapping("/get/{id}")
    @RequiresPermissions(PermissionConstants.${permissionPrefix}_READ)
    @Operation(summary = "${comments}详情")
    public ${className}GetResponse get(@PathVariable String id){
        return ${classname}Service.get(id);
    }

    @PostMapping("/add")
    @RequiresPermissions(PermissionConstants.${permissionPrefix}_ADD)
    @Operation(summary = "添加${comments}")
    public ${className} add(@Validated @RequestBody ${className}AddRequest request){
		return ${classname}Service.add(request, SessionUtils.getUserId());
    }

    @PostMapping("/update")
    @RequiresPermissions(PermissionConstants.${permissionPrefix}_UPDATE)
    @Operation(summary = "更新${comments}")
    public ${className} update(@Validated @RequestBody ${className}UpdateRequest request){
        return ${classname}Service.update(request, SessionUtils.getUserId());
    }

    @GetMapping("/delete/{id}")
    @RequiresPermissions(PermissionConstants.${permissionPrefix}_DELETE)
    @Operation(summary = "删除${comments}")
    public void delete(@PathVariable String id){
		${classname}Service.delete(id);
    }
}
